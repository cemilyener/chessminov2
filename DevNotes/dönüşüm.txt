# ChessContentManager Revizyon Dokümanı: PGN → JSON Dönüşüm Sistemi

## 1. Mevcut Durum ve Hedef

**Mevcut Durum:**
- ChessContentManager sınıfı çok karmaşık ve gereksiz validasyon kodları içeriyor
- Özellikle `validateAndFixFen` fonksiyonu sorunlara yol açıyor
- PGN dosyalarının işlenmesi ve JSON çıktısı alma süreci karmaşık

**Hedef:**
- ChessBase tarafından oluşturulan PGN dosyalarını doğru şekilde işleyebilen temiz bir yapı oluşturmak
- PGN'den elde edilen verileri belirli bir JSON formatında dışa aktarmak
- Varyantları da doğru şekilde işleyip JSON formatında temsil etmek

## 2. Kaldırılacak/Değiştirilecek Bölümler

### Kaldırılacak:
```javascript
validateAndFixFen(fen) {
  if (!fen) return DEFAULT_FEN;
  try {
    // ...validasyon kodu...
    return DEFAULT_FEN;
  } catch (error) {
    console.warn("FEN doğrulama hatası:", error);
    return DEFAULT_FEN;
  }
}
```
Bu fonksiyon yerine basit bir kontrol yapısı kullanılmalı:
```javascript
// Yeni yaklaşım
const validFen = fen || DEFAULT_FEN;
```

### Değiştirilecek:

**resetTree metodu:**
```javascript
resetTree(fen) {
  // Eski: const startFen = this.validateAndFixFen(fen);
  const startFen = fen || DEFAULT_FEN; // Yeni: Doğrulama yapmadan direkt kullan
  
  this.tree = {
    nodes: new Map(),
    metadata: {
      rootId: "root",
      mainLineNodeIds: ["root"],
      currentNodeId: "root"
    }
  };
  
  this.tree.nodes.set("root", {
    id: "root",
    fen: startFen,
    parentId: null,
    childrenIds: [],
    depth: 0,
    move: null,
    metadata: { isMainLine: true, comment: "Başlangıç pozisyonu" }
  });
  
  this.chess = new Chess();
  try {
    const loadResult = this.chess.load(startFen);
    if (!loadResult) {
      const manualChess = this.manuallySetupPosition(startFen);
      if (manualChess) {
        this.chess = manualChess;
      }
    }
  } catch (error) {
    const manualChess = this.manuallySetupPosition(startFen);
    if (manualChess) {
      this.chess = manualChess;
    }
  }
}
```

## 3. Eklenmesi/Geliştirilmesi Gereken Bölümler

### `loadFromPgn` Metodu:
```javascript
async loadFromPgn(pgn) {
  try {
    console.log("PGN yükleme başlatılıyor...");
    
    // PGN'i ayrıştır
    const games = this.splitPgnGames(pgn);
    if (games.length === 0) {
      console.error("Geçerli oyun bulunamadı");
      return false;
    }
    
    console.log(`${games.length} oyun bulundu, ayrıştırılıyor...`);
    
    this.parsedGames = [];
    
    for (const game of games) {
      try {
        // @mliebelt/pgn-parser kullanarak oyunu ayrıştır
        const parsedGame = await import('@mliebelt/pgn-parser').then(module => module.parse(game, { startRule: "game" }));
        
        // FEN başlığını al
        let fen = DEFAULT_FEN;
        if (parsedGame.tags && parsedGame.tags.FEN) {
          fen = parsedGame.tags.FEN;
        }
        
        // Oyun için düğüm ağacını oluştur
        const gameTree = this.buildGameTree(parsedGame, fen);
        
        // Ayrıştırılmış oyunu sakla
        this.parsedGames.push({
          tags: parsedGame.tags,
          fen,
          gameTree
        });
        
      } catch (parseError) {
        console.error("Oyun ayrıştırma hatası:", parseError);
      }
    }
    
    console.log(`${this.parsedGames.length} oyun başarıyla ayrıştırıldı`);
    return this.parsedGames.length > 0;
    
  } catch (error) {
    console.error("PGN yükleme hatası:", error);
    return false;
  }
}
```

### `export` Metodu:
```javascript
export() {
  try {
    const puzzles = this.parsedGames.map((game, index) => {
      // Ana hattı ve varyantları çıkar
      const { mainLine, variations } = this.extractMovesFromTree(game.gameTree);
      
      return {
        id: `puzzle-${index + 1}`,
        title: game.tags?.White || `Puzzle ${index + 1}`,
        difficulty: parseInt(game.tags?.White?.match(/\d+/) || "1"),
        fen: game.fen,
        mainLine,
        variations
      };
    });
    
    return {
      metadata: {
        title: "Chess Puzzle Set",
        source: "ChessBase",
        count: puzzles.length
      },
      puzzles
    };
  } catch (error) {
    console.error("Export hatası:", error);
    return { metadata: {}, puzzles: [] };
  }
}
```

### JSON Çıktı Formatı:

```json
{
  "metadata": {
    "title": "Chess Puzzle Set",
    "source": "ChessBase",
    "count": 2
  },
  "puzzles": [
    {
      "id": "puzzle-1",
      "title": "1",
      "difficulty": 1,
      "fen": "7k/3P4/2b3P1/3P3P/P7/5P2/2P3P1/4K3 b - - 0 1",
      "mainLine": ["Bxd7", "Kd2", "Bxa4", "Ke1", "Bxc2", "Kd2", "Bxg6", "Ke1", "Bxh5"],
      "variations": [
        {
          "startMoveIndex": 6,
          "moves": ["Bxd5", "Kd2", "Bxg2"]
        }
      ]
    },
    {
      "id": "puzzle-2",
      "title": "2",
      "difficulty": 2,
      "fen": "4k3/2p3p1/5p2/p7/3p3p/2B3p1/3p4/7K w - - 0 1",
      "mainLine": ["Bxf6", "Kf7", "Bxg7"],
      "variations": []
    }
  ]
}
```

## 4. Implementasyon Adımları

1. **ChessContentManager.js Revizyon:**
   - `validateAndFixFen` fonksiyonunu kaldır veya basitleştir
   - `resetTree` metodunu FEN validasyonu olmadan çalışacak şekilde güncelle
   - `loadFromPgn` metodunu @mliebelt/pgn-parser kullanarak yeniden yaz
   - `export` metodunu istenen JSON formatını üretecek şekilde geliştir

2. **Zustand Store Implementasyonu:**
   - PGN yükleme ve JSON dışa aktarma işlemleri için store aksiyonları ekle
   - ChessContentManager instance'ını store içinde oluştur

3. **Test:**
   - fc3.pgn dosyasıyla sistemin çalışmasını test et
   - JSON çıktısını doğrula

## 5. Örnek Test Kodu:

```jsx
import React, { useRef } from 'react';
import { useChessStore } from '../store/chessStore';

const PgnImporter = () => {
  const { loadPgn, exportAsJson, exportAsFile, isLoading, error, puzzleSets } = useChessStore();
  const fileInputRef = useRef(null);

  const handleFileChange = async (e) => {
    if (e.target.files[0]) {
      await loadPgn(e.target.files[0]);
    }
  };

  return (
    <div className="pgn-importer">
      <h2>PGN Dosya İşleme</h2>
      
      <div>
        <input 
          type="file" 
          ref={fileInputRef}
          accept=".pgn" 
          onChange={handleFileChange}
          style={{ display: 'none' }}
        />
        <button onClick={() => fileInputRef.current.click()}>
          PGN Dosyası Seç
        </button>
      </div>
      
      {isLoading && <div>Yükleniyor...</div>}
      {error && <div className="error">{error}</div>}
      
      {puzzleSets.length > 0 && (
        <div>
          <h3>Bulunan Puzzle Setleri</h3>
          <ul>
            {puzzleSets.map((set, index) => (
              <li key={index}>
                {set.metadata.title} ({set.puzzles.length} puzzle)
                <button onClick={() => exportAsJson(index)}>JSON Görüntüle</button>
                <button onClick={() => exportAsFile(index)}>Dosya İndir</button>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default PgnImporter;
```

## 6. Gerekli Bağımlılıklar

- `chess.js`: Satranç mantığı için (`^1.2.0`)
- `@mliebelt/pgn-parser`: PGN ayrıştırma (`^1.4.17`)
- `zustand`: Durum yönetimi

## 7. Test Verileri

- fc3.pgn: ChessBase tarafından oluşturulan örnek PGN dosyası
- Diğer puzzle setleri için benzer PGN dosyaları

Bu dokümandaki adımları izleyerek, ChessContentManager'ı mevcut gereksiz validasyon kodlarından arındırabilir ve ChessBase PGN dosyalarını doğru şekilde işleyip istenen JSON formatında çıktı üretebilen bir sistem oluşturabilirsiniz.